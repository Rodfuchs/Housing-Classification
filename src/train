from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import make_pipeline
from preprocessing import load_data, preprocess_data

# Load and preprocess
url = "https://drive.google.com/file/d/1MNscpmMalx2vDHb4vdEdPwkXz3zZ7K0P/view?usp=sharing"
data = load_data(url)
X, y, preprocessor = preprocess_data(data)

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=31416)

# Model
rf = RandomForestClassifier()

fullpipe = make_pipeline(preprocessor, rf).set_output(transform='pandas')

# Parameter grid
param_grid = {
    "columntransformer__pipeline-1__simpleimputer__strategy":["mean", "median"],
    "columntransformer__pipeline-1__standardscaler__with_mean":[True, False],
    "columntransformer__pipeline-1__standardscaler__with_std":[True, False],
    "randomforestclassifier__n_estimators": [100, 150],
    "randomforestclassifier__max_depth": [None, 20],
    "randomforestclassifier__min_samples_split": [2, 5],
    "randomforestclassifier__min_samples_leaf": [1, 2],
    "randomforestclassifier__max_features": ["sqrt", "log2"],
    "randomforestclassifier__bootstrap": [True]
}

# Grid search
search = GridSearchCV(fullpipe, param_grid, cv=10, verbose=1)
search.fit(X_train, y_train)

# Save best model for evaluation
best_model = search.best_estimator_

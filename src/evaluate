from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, roc_auc_score
from train import best_model
from preprocessing import load_data, preprocess_data
import pandas as pd

# Load and preprocess test data (same data used in train.py)
url = "https://drive.google.com/file/d/1MNscpmMalx2vDHb4vdEdPwkXz3zZ7K0P/view?usp=sharing"
data = load_data(url)
X, y, _ = preprocess_data(data)

# Train/test split (same as train.py)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=31416)

# Predictions
y_train_pred = best_model.predict(X_train)
y_test_pred = best_model.predict(X_test)

# Metrics
train_accuracy = accuracy_score(y_train, y_train_pred)
test_accuracy = accuracy_score(y_test, y_test_pred)
f1 = f1_score(y_test, y_test_pred)
precision = precision_score(y_test, y_test_pred)
recall = recall_score(y_test, y_test_pred)
roc_auc = roc_auc_score(y_test, best_model.predict_proba(X_test)[:, 1])

print("Training Accuracy:", train_accuracy)
print("Testing Accuracy:", test_accuracy)
print("F1 Score:", f1)
print("Precision Score:", precision)
print("Recall Score:", recall)
print("ROC AUC Score:", roc_auc)

# Predict on new data
new_url = "https://drive.google.com/file/d/1QjjOREyIugHZ0hkXdOgsqrHhkse0wfX-/view?usp=sharing"
new_data = load_data(new_url)
new_data = new_data.drop(['FireplaceQu', 'MasVnrType', 'Alley','PoolQC', 'Fence', 'MiscFeature'], axis=1)
new_prediction = best_model.predict(new_data)

# Save predictions
predictions_df = pd.DataFrame({
    "Id": new_data['Id'],
    "Expensive": new_prediction
})
predictions_df.to_csv("predictions.csv", index=False)
